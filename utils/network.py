import subprocess
import re
import time
from pwn import log

def get_tun_interfaces():
    """
    Get all interfaces matching the pattern 'tun[0-9]{1,3}'.
    """
    try:
        # Get the list of network interfaces 
        result = subprocess.check_output(['ip', 'link'], text=True)
        # Find all tun interfaces using regex
        return re.findall(r'tun[0-9]{1,3}', result)
    except subprocess.CalledProcessError as e:
        log.error(f"Error fetching interfaces: {e}")
        return []

def has_default_route(interface):
    """
    Check if the interface has a default route.
    """
    try:
        # Get the routing table
        routes = subprocess.check_output(['ip', 'route', 'show', 'default'], text=True)
        # Return True if the interface has a default route
        return interface in routes
    except subprocess.CalledProcessError:
        return False

def set_metric(interface, metric, updated_interfaces):
    """
    Set the metric for a given interface, logging only successful changes.
    """
    if has_default_route(interface):
        try:
            # Delete the existing default route
            subprocess.run(['ip', 'route', 'del', 'default', 'dev', interface], check=True)
            # Add the default route back with the new metric
            subprocess.run(['ip', 'route', 'add', 'default', 'dev', interface, 'metric', str(metric)], check=True)
            if interface not in updated_interfaces:
                log.success(f"Metric set to {metric} for {interface}")
                updated_interfaces.add(interface)
        except subprocess.CalledProcessError as e:
            log.error(f"Failed to set metric for {interface}: {e}")
    else:
        log.info(f"No default route found for {interface}, skipping.")

def ensure_dns_in_resolv_conf():
    """
    Ensure that 8.8.8.8 is the first DNS entry in /etc/resolv.conf.
    Handle autogenerated headers properly.
    """
    resolv_path = '/etc/resolv.conf'
    dns_entry = 'nameserver 8.8.8.8'

    try:
        # Read the current content of /etc/resolv.conf
        with open(resolv_path, 'r') as file:
            lines = file.readlines()

        # Detect autogenerated header and keep it intact
        header_lines = []
        content_lines = []
        is_autogenerated = False

        for line in lines:
            if line.startswith('#') and ('GENERATED' in line or 'NetworkManager' in line):
                header_lines.append(line)
                is_autogenerated = True
            else:
                content_lines.append(line)

        # Check if 8.8.8.8 is already the first DNS
        if content_lines and content_lines[0].strip() == dns_entry:
            log.info("8.8.8.8 is already the first DNS entry in /etc/resolv.conf.")
            return

        # Remove existing 8.8.8.8 entry if it exists in content lines
        content_lines = [line for line in content_lines if line.strip() != dns_entry]

        # Add 8.8.8.8 as the first line in content
        content_lines.insert(0, dns_entry + '\n')

        # Combine header and content lines
        updated_lines = header_lines + content_lines

        # Write the updated content back to /etc/resolv.conf
        with open(resolv_path, 'w') as file:
            file.writelines(updated_lines)

        log.success("Added 8.8.8.8 as the first DNS entry in /etc/resolv.conf.")
    except PermissionError:
        log.error("Permission denied: Cannot modify /etc/resolv.conf. Try running as root.")
    except Exception as e:
        log.error(f"Failed to update /etc/resolv.conf: {e}")

def main():
    """
    Continuously monitor for tun interfaces and update their metrics.
    """
    log.info("Monitoring tun interfaces for changes...")
    updated_interfaces = set()
    try:
        while True:
            tun_interfaces = get_tun_interfaces()
            for interface in tun_interfaces:
                # Only try to set the metric; log success
                set_metric(interface, 200, updated_interfaces)
                # Ensure DNS entry is set
                ensure_dns_in_resolv_conf()

            time.sleep(1)
    except KeyboardInterrupt:
        log.info("Shutting down monitoring.")

if __name__ == "__main__":
    main()
